/****************************************************************/
/*			dustdrift1Dver1.c			*/
/****************************************************************/

	2013. 11. 08. --> Zsolt kódja
	
	Beolvassa az előző programmal (init_dust.c) kiköpött init_data.dat file-t: a kódban a adott a részecskeszám (PARTICLE_NUMBER), emellett olvassa be a file oszlopait (sorszám, távolság, méret, tömeg), az elsőt a "szemét"-ben tárolja (dummy), az utolsót egyelőre nem használja fel.
	A kód egyelőre G = 0.017 ... egységben számol, így az integrálás időtartama is napokban mérhető

	do - while iteráció: a megadott időlépésig számol:
		for ciklus: 
			minden részecskére, minden időlépésben kiszámolja a részecskék csillagtól való távolságát (int_step() függvény), majd évenként hozzáírja a kimeneti file-hoz (/* pormozgas.dat	*/)
	
	int_step(): 
		bemenet: a részecske mérete (prad), időlépés köze (step -- dt), a részecske helyete (y)
		kimenet: a részecske új helyzete (ynew)
			A függvény RK4 integrátort használ, a különböző részeit az eqrhs() függvény számolja ki

	eqrhs():
		bemenet: a részecske mérete (pradius), távolsága (r)
		kimenet: az új távolság (drdt)

		kiszámolja: 
			H = r * asp_ratio
			v_kepler = sqrt(G*G*M_csillag/r)
			c_s = v_kepler * H
			sigma = sigma_mmsn_cgs() --> függvény, ami cgs-ben adja vissza a sigmát adott helyen
			p = asp_ratio * G * G * M_csillag / (sqrt(2 * Pi * r * r))
			dPdr: a P deriváltja: dPdr = (SIGMAP_EXP - 2) * asp_ratio * G * G * M_csillag * SIGMA0 * pow(r,(SIGMAP_EXP - 3.0)) / sqrt(2 * Pi) --> dPdr analitikus alakja, ahol SIGMA_EXP a sigma r függése
			St = Stokes_Number() : az adott távolságra lévő, addot méretű részecske Stokes száma
			drdt = St / (1 + St * St) * H/p * dPdr * c_s : ez az 1D-s drift képlete!
	
	sigma_mmsn_cgs(): 
		bemenet: r távolság 
		
		kiszámolja:
			SIGMA0 * pow(r,SIGMAP_EXP) : a korong felületisűrűségét adja meg egy adott helyen

	Stokes_Number(): 
		bemenet: a részecske nagysága (pradius), távolsága (r), az adott helyen lévő felületisűrűség értéke (sigma)
		
		kiszámolja: PDENSITY * pradius * Pi / (2 * sigma)
			ez a Stokes szám Epstein tartományban, a PDENSITY makró (a részecske átlagsűrűsége)



*********************	BUGOK	******************************

	A *-gal jelöltek megoldva!
	
	* BUG01: -O3 kapcsolóval hibaüzenet:
		 warning: ignoring return value of ‘fscanf’, declared with attribute warn_unused_result [-Wunused-result]
	* BUG02: -Wall kapcsolóval a main függvény:
		warning: control reaches end of non-void function [-Wreturn-type]
	* BUG03: main() függvény visszatérési értéke se nem int, se nem void, bár a visszatérési értéke int típusú
		return type defaults to ‘int’ [-Wreturn-type]
	* BUG04: eqrhs() függvényben -Wall kapcsolóval
		warning: unused variable ‘index’ [-Wunused-variable]
	* BUG05: eqrhs() függvényben -Wall kapcsolóval
		warning: unused variable ‘coef3’ [-Wunused-variable]
	* BUG06: eqrhs() függvényben -Wall kapcsolóval
		warning: unused variable ‘coef2’ [-Wunused-variable]
	* BUG07: eqrhs() függvényben -Wall kapcsolóval
		warning: unused variable ‘coef1’ [-Wunused-variable]
	* BUG08: eqrhs() függvényben -Wall kapcsolóval
		warning: unused variable ‘rindex’ [-Wunused-variable]
	* BUG09: eqrhs() függvényben -Wall kapcsolóval
		warning: unused variable ‘rmid’ [-Wunused-variable]
	* BUG10: int_step() függvényben -Wall kapcsolóval
		warning: unused variable ‘n’ [-Wunused-variable]
	* BUG11: main() függvényben -Wall kapcsolóval
		unused variable ‘StN’ [-Wunused-variable]
	* BUG12: main() függvényben -Wall kapcsolóval
		warning: unused variable ‘dpdr’ [-Wunused-variable]
	* BUG13: main() függvényben -Wall kapcsolóval
		warning: unused variable ‘pressure’ [-Wunused-variable]
	* BUG14: main() függvényben -Wall kapcsolóval
		warning: unused variable ‘sd’ [-Wunused-variable]
	* BUG15: main() függvényben -Wall kapcsolóval
		warning: unused variable ‘r’ [-Wunused-variable]




/****************************************************************/
/*			dustdrift1Dver2.c			*/
/*			   2013. 11. 11.			*/
/****************************************************************/

****************	V1 BUG FIX	**********************

	ver1 BUG01 kiküszöbölése:
		Le kell ellenőriztetni a programmal, hogy mi az fscanf visszatérési értéke! Jelen esetben a beolvasandó file 4 oszlopos, így a visszatérési értéke 4, ha mindent jól beolvas:

            if(fscanf(fin1,"%d %lg %lg %lg",&dummy,&distance,&particle_radius,&reprmass) == 4) {
		printf("file olvasasa soronkent: %i\n", dummy);
	    } else {
		printf("nem sikerult a %i-ik sort beolvasni!\n",dummy);
		getchar();
            }

	ver1 BUG02 kiküszöbölése:
		a main visszatérési értékét meg kell adni: 
			return 0;

	ver1 BUG03 kiküszöbölése:
		int main()

	ver1 BUG04 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG05 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG06 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG07 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG08 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG09 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG10 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG11 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG12 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG13 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG14 kiküszöbölése:
		a megfelelő deklarált változó törlése

	ver1 BUG15 kiküszöbölése:
		a megfelelő deklarált változó törlése



************	TOVÁBBI MÓDOSÍTÁSOK	**************

	reszecskek_szama(): új függvény
		Bemenet: numout = 0
		Visszatérés: numout (a sorok száma)
			Megnyitja a részecskéket tartalmazó file-t és megnézi, hogy hány sora van a file-nak (ez a részecskék száma is egyben!)
		
	A függvény után nyitja meg a main-ben újra a beolvasandó file-t, különben nem tudja azonos változóban (fin1) kezelni a program (mert megnyitom a main legelején és a sor olvasó függvényben is). A megfelelő adatok betöltése után a file-t bezárom.

	eqrhs() függvényben: módosítás
		Bemenet: a részecskék mérete (pradius, cm-ben), a távolságuk (r, au-ban)
		Kimenet: a részecskék új távolsága (au-ban)

			G2 = G*G --> ezt makróba tettem
			drdt-hez mindent, amit ki kell számolni, függvénybe írtam meg:
				H, P, dPdr, csound

	scale_height(): új függvény
		Bemenet: r (au)
		Visszatérés: skálamagasság (au)
			kiszamolja az adott helyen a skálamagasságot

	v_kep(): új függvény
		Bemenet: r (au)
		Kimenet: lokális kepleri körsebesség (egyelőre AU/nap)
			lokális keplersebesség a korongban	

	c_sound(): új függvény
		Bemenet: r (au)
		Visszatérés: lokális hangsebesség (egyelőre AU/nap)
			lokális hangsebesség a korongban

	press(): új függvény
		Bemenet: r (au)
		Visszatérés: lokális nyomás (egyelőre M_Sun / nap / nap / AU)
			lokális gáznyomás a korongban
	
	dpress(): új függvény
		Bemenet: r (au)
		Visszatérés: lokális nyomás deriváltja (egyelőre M_Sun / nap / nap / AU / AU)
			a nyomás analitikus alakja


*********************	BUGOK	******************************
	
	* ver2 BUG01: A press() FÜGGVÉNYBEN SZEREPLŐ NYOMÁS KÉPLETE NEM JÓ!!! A GYÖKJEL ALÓL KI KELL VINNI R^2-ET!!


/****************************************************************/
/*			dustdrift1Dver3.c			*/
/*			   2013. 11. 12.			*/
/****************************************************************/

************	MÓDOSÍTÁSOK	**************

A sigma időbeli fejlesztéséhez
#define NGRID       	5000
#define RMIN		1.
#define RMAX		100.
#define DGRID 		(RMAX - RMIN) / (NGRID - 1)

	kep_freq(): új függvény
		Bemenet: r (au)
		Visszatérés: lokális kepleri körfrekvencia
			lokális kepleri körfrekvencia a korongban

	visc(): új függvény
		Bemenet: r (au)
		Visszatérés: a viszkozitás nagysága
			Kiszámolja a viszkozitás mértékét a korongban egy adott helyen. Modellezhető a dead zone két határa:
				r_dze_i: a belső dead zone határa au-ban
				r_dze_o: a külső dead zone határa au-ban
				Dr_dze_i: a belső dead zone átmenet vastagága au-ban (illetve annak a fele)
				Dr_dze_o: a külső dead zone átmenet vastagága au-ban (illetve annak a fele)
				a_mod: alfa változtatásának mértéke
			A fenti paraméterekkel egy tanh függvénnyel modellezhető a viszkozitás csökkenése:
				alpha_r = 1.0 - 0.5 * (1.0 - a_mod) * (tanh((r - r_dze_i) / Dr_dze_i) + tanh((r_dze_o - r) / Dr_dze_o))
			Így nu = alpha * alpha_r * cs * H

	Coeff_1(): új függvény
		Bemenet: r (au)
		Visszatérés: az együttható értéke
			d(sigma*nu)/dt = 3*nu*d2(sigma*nu)/dr2 + 9*hu/(2*r)*dsigma/dr --> 3*nu = Coeff_1 

	Coeff_2(): új függvény
		Bemenet: r (au)
		Visszatérés: az együttható értéke
			d(sigma*nu)/dt = 3*nu*d2(sigma*nu)/dr2 + 9*hu/(2*r)*dsigma/dr --> 9*nu /(2*r) = Coeff_2

	Perem(): új függvény
		Bemenet: sigma vektor
		Kimenet: sigma értéke a peremen
			sigmavec[0] = (sigmavec[1] / visc(RMIN)) * visc(RMIN - DGRID);
  			sigmavec[NGRID+1]=(sigmavec[NGRID] / visc(RMIN + (NGRID) * DGRID)) * visc(RMIN + (NGRID+1) * DGRID);
				ReZso-féle peremfeltétel, az anyag kiáramlása megengedett

	Initial_Profile(): új függvény
		Bemenet: sigma és r vektor
		Kimenet: a sigma kezdeti profilja (a peremmel együtt)
			sigma vektor feltöltése a kezdeti profillal

	time_step(): új függvény
		Bemenet: r vektor
		Visszatérés: dt
			a diffúziós egyenlet stabil megoldásához szükséges minimális időlépés

	interpol(): új függvény
		Bemenet: interpolálandó függvény, rvec, aktuális pozíció
		Kimenet: interpolált érték
			a bemenő diszkrét pontokban ismert függvényt a részecske aktuális helyére interpolálja
				a függvényhívás az int_step() függvényen belül

	main():
		Új vektorok: sigmavec[NGRID+2], rvec[NGRID+2]
		Kiszámolja: dt-t, sigma iőfejlődését
		
		Ha a részecske csillagtól való távolsága kisebb, mint RMIN, akkor kinullázza a távolságot, egyébként pedig kiszámolja:

			if (radius[i][0] > RMIN) { 
				y = radius[i][0];
		     		particle_radius = radius[i][1]; 
		     
		     		int_step(particle_radius,deltat,y,&y_out);
		     		radius[i][0] = y_out;
			} else {
				radius[i][0] = 0.0;
			}
		
		Az integrálás alatt évenként írja ki a felületisűrűséget és a kiírandó file neve tartalmazza az időt (évben)





*********************	BUGOK	******************************

	A *-gal jelöltek megoldva!

	  BUG01: ha az aspect ratio nem állandó, hanem megengedett benne törés, akkor a peremfeltétel nem jó! El kezd növekedni a korong tömege!!
	  BUG02: valamiért ha az interpolálásnál a makroban kiszámolt DGRID-del számolok, akkor nem jó értéket ad, ezért a globális változóként bevezetett DD = DGRID-et használom mindenhol, ahol DGRID-del kéne számolni
	* ver3 BUG03: nem fogja meg a port a nyomási maximum, csak lelassítja!


/****************************************************************/
/*			dustdrift1Dver4.c			*/
/*			   2013. 11. 20.			*/
/****************************************************************/


****************	V3 BUG FIX	**********************

	v3 BUG03 kiküszöbölése: a dpress() függvényben használt nyomás deriváltja csak a kezdeti időpillanatban valós, idővel nem fejlődik. Javítás: sima Euler deriválás


************	MÓDOSÍTÁSOK	**************

	Perem_Press(): új függvény
		Bemenet: nyomás vektor
		Visszatérés: nyomás a peremen
			peremfeltétel a nyomásra

	Initial_Press(): új függvény
		Bemenet: szigma és r vektor
		Visszatérés: nyomás vektor
			A nyomás kezdeti profilja

	dpress(): módosítás
		Bemenet: nyomás vektor
		Visszatérés: nyomásderivált vektor
			dp(i) = (dp(i+1) - dp(i-1)) / (2*dgrid)

	Perem_dPress(): új függvény
		Bemenet: nyomásderivált vektor
		Visszatérés: nyomásderivált a peremen
			peremfeltétel a nyomásderiváltra

	Initial_dPress(): új függvény
		Bemenet: nyomás vektor
		Visszatérés: nyomásderivált vektor
			A nyomásderivált kezdeti profilja

	eqrhs(): módosítás
		Bemenet: a részecske mérete (pradius), nyomásderivált (dp), szigma (sigma), távolsága (r)
		Kimenet: az új távolság (drdt)

	int_step(): módosítás
		Bemenet: a részecske mérete (prad), nyomásderivált (dpressvec), szigma (sigmavec), távolság (rvec) vektor, időlépés köze (step -- dt), a részecske helyete (y)
		Kimenet: a részecske új helyzete (ynew)
			a függvény RK4 integrátort használ, a különböző részeit az eqrhs() függvény számolja ki
		
	main(): módosítás
		Új vektorok: pressvec[NGRID+2], dpressvec[NGRID+2]
		Minden időpillanatban kiszámolja a nyomást és a nyomásderiváltakat



/****************************************************************/
/*			dustdrift1Dver5.c			*/
/*			   2013. 11. 21.			*/
/****************************************************************/

****************	V2 BUG FIX	**********************
	
	ver2 BUG01: A képlet átírva, ettől a verziótól kezdve jó!
		press() KORÁBBI VERZIÓKBAN HIBÁS A NYOMÁS KÉPLETE!!! p = G2 * M_star * asp_ratio / sqrt(2pi) * sigma / r / r!! Eddig az r is a gyökjel alatt volt!


************	MÓDOSÍTÁSOK	**************

	törölve: sigmagas_mmsn_cgs() függvény --> nem használt

	SIGMA0, SIGMAP_EXP --> beolvassa 
	G = 1.-ben számol!!!
	#define STEPWRITE 500		--> hány lépésenként írjon ki adatokat

	disk_param_be(): új függvény
		Bemenet: -
		Visszatérés: sigma0, sdexp
			A sigma0-t és a profil kitevőjét várja vissza a függvény, az adatokat a "disk_param.dat" file-ból olvassa be
			
	por_be(): új függvény
		Bemenet: -
		Visszatérés: a részecskék távolsága (AU-ban!) és nagysága (AU-ban!)
			Beolvassa az "init_data.dat" file-ból a részecskék adatait

	Stokes_Number(): módosítás
		Bemenet: a részecske nagysága (pradius), távolsága (r), az adott helyen lévő felületisűrűség értéke (sigma)
		Kimenet: az adott helyen a részecske Stokes száma
			a képletben a részecske sűrűségét M_Nap / AU / AU / AU-ban használja fel a függvény (PDENSITYDIMLESS)

	c_sound(): módosítás
		Bemenet: tavolsag (r, AU-ban)
		Kimemet: lokális hangsebesség
			cs = H * omega (v4-től visszafelé rossz a képlet!)

	visc(): módosítás
		Bemenet: r
		Kimenet: a viszkozitás értéke az adott helyen
			Az átmenet max 2H kell legyen, különben Rossby instabilitás lép fel. Ezért átírtam az átmenetet:
 		 		Dr_dze_i = 2. * scale_height(r_dze_i);
  				Dr_dze_o = 2. * scale_height(r_dze_o);

	rho_mp(): új függvény
		Bemenet: sigma, r
		Kimenet: a sűrűség a fősíkban
			Kiszámolja a sűrűséget a fősíkban dimenziótlan egységekben

	press(): módosítás
		Bemenet: sigma, r
		Kimenet: nyomás 
			Az analítikus formulával kiszámolt nyomás valamiért még mindig nem jó, ezért a p = rho * cs * cs képletet számolja a továbbiakban a program

	find_max(): új függvény
		Bemenet: 2d-s tömb (jelenleg a porrészecskék távolságát és nagyságát tartalmazó tömb)
		Kimenet: a tömb legnagyobb eleme
			Kiszámolja a töm legnagyobb elemét

	main(): módosítás
		A deklarált változók közül kitörölve a PARTICLE_NUMBER, mert azt már globális változóként definiáltuk az elején. Törölve továbbá: distance és reprmass
		Új változó: double max
		A korong paramétereit és a részecskék adatait függvénnyel file-ból olvassa be
		
		A "surface.dat" file-t az időléptetésen belül írja ki az if(t==0) feltétellel, ekkor kiírja a "timescale.dat" file-ba a porrészecskék beáramlásának időskáláját is --> kommentelve
		
		Minden időpillanatban megkeresi a legtávolabbi részecske távolságát, és ha az nagyobb, mint RMIN, akkor folytatja az integrálást, ha nem, akkor sikeresen kilép a program --> kommentelve. 
		Az integrálást csak azokra a porrészecskékre végzi el, amelyek RMIN és RMAX között vannak (különben kinullázza a távolságukat --> kommentelve)

		Az adatok kiírása: if (L%STEPWRITE==0) --> a lépés száma elmentve makróként
		Minden időkiírásnál évben írja ki az időt

		A program sikeres lefutásakor (akár az integrálás vége előtt, akár az integrálás végén) "figyelmeztető szöveget" dob ki a terminálra, hogy a program sikeresen lefutott, ENTER megnyomásával a program kilép


/****************************************************************/
/*			dustdrift1Dver6.c			*/
/*			   2013. 11. 21.			*/
/****************************************************************/


************	MÓDOSÍTÁSOK	**************

	makroból törölve: RMIN, RMAX DGRID
	törölt globális változók: DD
	
	új globális változók:
		double r_dze_i; // = 5.0;					
		double r_dze_o; // = 20.0;						/*	az atmenet 2*H	*/
		double Dr_dze_i; // = 2. * scale_height(r_dze_i);
		double Dr_dze_o; // = 2. * scale_height(r_dze_o);
		double a_mod; // = 0.01;
		double RMIN, RMAX;

		FILE *fin1, *fin2, *fout, *fmo, *fil, *fout2, *histfil, *massfil; 

	disk_param_be(): módosítás
		Bemenet: - 
		Visszatérés: sigma0, sdexp, Rmin, Rmax, r_dzei, r_dzeo, dr_dzei, dr_dzeo, alph_mod
			A korong paramétereinek beolvasása a megfelelő file-ból

	por_be(): módosítás
		Bemenet: -
		Visszatérés: a porszemcse mérete, távolsága és reprezentatív tömege
			Beolvassa a részecskék adatait a megfelelő file-ból

	visc(): módosítás
		Bemenet: r
		Kimenet: viszkozitás
			A deadzone modellezéséhez szükséges paraméterek törölve a lokális változók közül

	Perem(): módosítás
		Bemenet: sigmavec, DD
		Visszatérés: sigma a peremen
			Új bemenet plusszban: DD

	Initial_Profile(): módosítás
		Bemenet: r, DD
		Visszatérés: sigma kezdeti profilja
			Új bemenet plusszban: DD


	time_step(): módosítás
		Bemenet: rvec, DD
		Kiemenet: dt
			Új bemenet plusszban: DD

	dpress(): módosítás
		Bemenet: nyomásvektor, DD
		Visszatérés: nyomás deriváltjának vektora
			Új bemenet plusszban: DD

	Initial_dPress(): módosítás
		Bemenet: nyomásvektor, DD
		Visszatérés: nyomás deriváltjának kezdeti profilja
			Új bemenet plusszban: DD

	interpol(): módosítás
		Bemenet: interpolálandó függvény, DD, r vektora, pozíció
		Visszatérés: interpolált érték
			Új bemenet plusszban: DD

	int_step(): módosítás
		Bemenet: prad, dpressvec, sigmavec, rvec, DD, step, y
		Visszatérés: ynew
			Új bemenet plusszban: DD

	find_num_zero(): új függvény
		Bemenet: rvec, dpvec 
		Kimenet: a nyomási maximumok helye
			Összeszorozza az egymás melletti pontokban a nyomás deriváltjának értékét, és ahol a szorzat negatív, ott történik előjelváltás (nyomási max/min). A maximum hely ott van, ahol a dp pozitívból negatívba megy át.

	find_r_zero(): új függvény
		Bemenet: r1, r2, dp1, dp2
		Kimenet: r
			Az egyenes egyenletével megkeresi a diszkrét pontokkal, hogy pontosan hova esne a függvény 0 pontja.

	find_zero(): új függvény
		Bemenet: i, rvec, dpvec
		Kimenet: r
			Ha a nyomás deriváltja 0, és nyomási maximum van, akkor meghívja a find_r_zero() függvényt. Onnan visszakapja a nyomási maximum pontos helyét.

	find_r_annulus(): új függvény
		Bemenet: DD, rvec, rout (a nyomási maximum pontos helye)
		Visszatérés: a maximum körüli belső (ind_oi) és külső (ind_oo) "körgyűrű" helye
			A nyomási maximum körül 2H vastagságban vesz egy körgyűrűt

	main(): módosítás

		új változók:
			int dim, j;
			double massvec[PARTICLE_NUMBER], partmassind[PARTICLE_NUMBER][3];;

		disk_param_be(&SIGMA0, &SIGMAP_EXP, &RMIN, &RMAX, &r_dze_i, &r_dze_o, &Dr_dze_i, &Dr_dze_o, &a_mod);
		por_be(radius,massvec);				
		Initial_Profile(sigmavec,rvec,DD);
		Initial_dPress(dpressvec,pressvec,DD);
		deltat = time_step(rvec,DD)/5.;						/*	idolepes	*/

	   	massfil = fopen("mass.dat","w");

		if(t==0.) { részbe:

			double rmid;
			int rindex;

			for (i = 0; i < PARTICLE_NUMBER; i++) {	függvényen belül:

  	  			rmid = (radius[i][0] - RMIN) / DD;     						/* 	The integer part of this gives at which index is the body	*/
				rindex = (int) floor(rmid);							/* 	Ez az rmid egesz resze --> floor egeszreszre kerekit lefele, a +0.5-el elerheto, hogy .5 felett felfele, .5 alatt lefele kerekitsen						*/
	
				partmassind[i][0] = (double)i;							/*	index of the particles						*/
				partmassind[i][1] = massvec[i];		/*	mass of the particles						*/
				partmassind[i][2] = rindex;							/*	initial distance of the particles				*/
 				... (folytatódik a függvény)
			} (for vége)

			még az if statement-en belül a for ciklus után:

			fprintf(fout2,"%lg %lg\n",radius[i][0], (radius[i][0] / drdt[i])/2.0/M_PI);

			fclose(fout2);
			double ind_oi, ind_oo;			

			find_r_annulus(DD,rvec,r_dze_o,&ind_oi,&ind_oo);		/*	A nyomasi maximum korul 2H tavolsagban keres korgyurut, a fuggveny visszaadja a cellak indexet	*/


			int index_i;
			double mass = 0.;

			for (i = 0; i < NGRID; i++) {

				index_i = partmassind[i][2];

				double masstemp = 0.;
				if ((index_i >= (int)ind_oi) && (index_i <= (int)ind_oo)) {
					
					masstemp = partmassind[i][1];
					mass = mass + masstemp;

				}
			}


			fprintf(massfil,"%lg %lg\n",t/2./M_PI,mass);
			fflush(massfil);


		} (if(t==0.) vége!!


		if(max >= RMIN) { ezen belül:

			if (L%STEPWRITE==0) {	ezen belül:

				dim = find_num_zero(rvec,dpressvec);
				double r_count[dim];

				printf("dim: %i\n",dim);

				double temp_new = 0.;
				double temp = 0.;
				double rout = r_dze_o;
				double ind_oi, ind_oo;
				j = 0;
	
				if(dim != 0) {
					for(i = 0; i < NGRID; i++) {

						temp_new = find_zero(i,rvec,dpressvec);
						if(temp != temp_new && i > 3 && temp_new != 0.0) {
							r_count[j] = temp_new;
							j++;
						}
						
						if(temp_new > 0.) {
							temp = temp_new;
							rout = temp;
						} 
					}

				}

				find_r_annulus(DD,rvec,rout,&ind_oi,&ind_oo);		/*	A nyomasi maximum korul 2H tavolsagban keres korgyurut, a fuggveny visszaadja a cellak indexet	*/

				int index_i;
				double mass = 0.;
				
				for(i = 0; i < PARTICLE_NUMBER; i++) {
	
					index_i = partmassind[i][2];

					double masstemp = 0.;
					if ((index_i >= (int)ind_oi) && (index_i <= (int)ind_oo)) {

						masstemp = partmassind[(int)index_i][1];
//						mass_growthvec_r2[count] += mass;
						mass = mass + masstemp;

					}
					

				}

				double rmid;
				int rindex;

				for(i = 0; i < PARTICLE_NUMBER; i++) {
					rmid = (radius[i][0] - RMIN) / DD;     					/* 	The integer part of this gives at which index is the body	*/
					rindex = (int) floor(rmid);						/* 	Ez az rmid egesz resze --> floor egeszreszre kerekit lefele, a +0.5-el elerheto, hogy .5 felett felfele, .5 alatt lefele kerekitsen						*/
					partmassind[i][2] = rindex;

				}

				if (mass != 0.) {

					fprintf(massfil,"%lg %lg\n",t/2./M_PI,mass);
					fflush(massfil);
				}

			... if folytatása
		} (if(max >= RMIN) VÉGE!!)




/****************************************************************/
/*			dustdrift1Dver7.c			*/
/*			   2014. 01. 28.			*/
/****************************************************************/


************	MÓDOSÍTÁSOK	**************

	makroból törölve: alpha_visc, PDENSITYDIMLESS, PDENSITY
	új makró: CMPSECTOAUPYRP2PI
	új globális változók:  
		double PDENSITY; 
		double PDENSITYDIMLESS;
		double alpha_visc;

	új file: *fout3

	
	disk_param_be(): módosítás
		Bemenet: - 
		Visszatérés: sigma0, sdexp, Rmin, Rmax, r_dzei, r_dzeo, dr_dzei, dr_dzeo, alph_mod, rho_p, rho_p_dimless, alphav
			Új visszatérés: rho_p, rho_p_dimless, alphav
			új változók:
				double rhop, alpha;
		A beolvasott file-ból új paraméterek beolvasása: rhop (a részecske sűrűsége) és alpha (a viszkozitás értéke)

			*rho_p = rhop;
			*rho_p_dimless = rhop / SUN2GR * AU2CM * AU2CM * AU2CM;
			*alphav = alpha;

	Stokes_Number(): módosítás
		Új bemeneti érték: PDENSITYDIMENSIONLESS
		
	alpha_turb(): új függvény
		Bemenet: r, alpha_visc
		Kimenet: viszkozitás csökkentésének mértéke
			Ide került át az alpha paraméter csökkentése

	visc(): módosítás
		Bemenet: r, alphavisc
		Kimenet: viszkozitás mértéke
			Egy függvényhívással visszaadja a lokális viszkozitás értéket

	
	Coeff1(): módosítás
		Új bemeneti érték: alphavisc
			ezen belül a meghívott visc() függvénynek is egyel több paramétere van!

	Coeff2(): módosítás
		Új bemeneti érték: alphavisc
			ezen belül a meghívott visc() függvénynek is egyel több paramétere van!

	Perem(): módosítás
		Új bemeneti érték: alphavisc
			ezen belül a meghívott visc() függvénynek is egyel több paramétere van!

	Initial_Profile(): módosítás
		Új bemeneti érték: alphavisc
			ezen belül a meghívott Perem() függvénynek is egyel több paramétere van!

	time_step(): módosítás
		Új bemeneti érték: alphavisc
			ezen belül a meghívott Coeff1() függvénynek is egyel több paramétere van!

	eqrhs(): módosítás
		Új bemeneti érték: pdensdim (a dimenziótlan sűrűsége a részecskének)
			ezen belül a meghívott Stokes_Number() függvénynek is egyel több paramétere van!

	a_drift(): új függvény --> KOMMENTELVE! (nincs befejezve!!!)
		Bemenet: -
		Kimenet: a radiális drift által meghatározott részecskeméret!

	a_turb(): új függvény
		Bemenet: sigma, r, rho_p, alphvisc
		Kimenet: a kis skalaju turbulencia altal okozott fragmentacio szerinti maximalis meret

	a_df(): új függvény
		Bemenet: sigma, r, p, dp, rho_p
		Kimenet: radialis drift altal okozott fragmentacio szerinti maximalis meret

	find_min(): új függvény
		Bemenet: 3 érték
		Kimenet: a 3 érték közül a minimális

	int_step(): módosítás
		Új bemeneti érték: time, dpressvec, pdensdim, alphvisc
			ezen belül a meghívott eqrhs() függvénynek is egyel több paramétere van!
		Új visszatérési érték: pradnew (az adott helyen lehető új, maximális részecskeméret)
			új változók:
				double sturb, sdf, smin, pdens, p;	
		Amennyiben a kapott idő értéke nem nulla, az adott helyen lévő részecskéhez interpolálja a nyomást, valamint kiszámolja az adott helyen a maximális részecskeméretet
		
	main(): módosítás
		Új változó: 
			char size_name[64];
	
		disk_param_be() --> több visszatérési érték! (ld. a függvénynél)
		Initial_Profile() --> több visszatérési érték! (ld. a függvénynél)

		fout3 --> új file kiratása size."time".dat névvel, ami az időt, a részecske "azonosítóját", valamint méretét tartalmazza

		t == 0-kor az int_step() függvény az új részecskeméretet egy temp nevű változóban tárolja, ezt nem használja a későbbiekben a program. Továbbá --> több bemeneti érték! (ld. a függvénynél)

		idő léptetése:
			a sigmára vonatkozó egyenlet megoldásakor a visc() több bemeneti paramétert kap!
			Perem() --> több bemeneti érték! (ld. a függvénynél)
			int_step() --> több bemeneti érték! (ld. a függvénynél), valamint egy új kimenet --> az új részecskeméret
				így a radius[i][1] = prad_new (amely az új részecskeméret)


	BUG: hosszú idő alatt a bump kimegy a peremre --> váltás! PARABOLA!


/****************************************************************/
/*			dustdrift1Dver8.c			*/
/*			   2014. 01. 28.			*/
/****************************************************************/


	Parabola(): új függvény
		Bemenet: vec (az illesztendő függvény elemei), i1, i2, i3 (az illesztési pont előtti 3 cella indexe), DD, RMIN
		Visszatérés: a, b, c (parabola illesztéséhez szükséges együtthatók)
			Kiszámolja, hogy ha 3 pontra illesztünk parabolát, milyen együtthatókat használjunk


