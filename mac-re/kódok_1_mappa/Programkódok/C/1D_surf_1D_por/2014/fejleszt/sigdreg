/*	Fuggveny a por feluletisurusegenek kiszamolasara	*/
void Get_Sigmad(double L, double max, double min, double rad[][2], double radmicr[][2], double *sigma_d, double *sigma_dm, double *massvec, double *massmicrvec) {

	double dd = (RMAX - RMIN) / (PARTICLE_NUMBER-1);	/*	Mivel a jelen futas gridfelbontasa nem feltetlen egyezik meg a porreszecskeket generalo program gridfelbontasaval - ez a feluletisuruseg miatt lenyeges! - ezert itt szamolja ki a program	*/
	int i,j;
	double sigdtemp[PARTICLE_NUMBER][2], sigdmicrtemp[PARTICLE_NUMBER][2];

	j = 0;

	for(i=0;i<PARTICLE_NUMBER;i++){

/*	cm-es por feluletisurusegenek kiszamolasa	*/
/*	ha a reszecske tavolsaga nagyobb, mint RMIN, azaz a szamolas tartomanyan belul van, a feluletisuruseget az altala kepviselt tomegbol szamolja vissza a program	*/
		if((rad[i][0] >= RMIN)) {
			sigdtemp[i][0] = massvec[i] / (2. * rad[i][0] * M_PI * dd);	// sigma = m /(2 * r * pi * dr) --> itt a dr az a tavolsag, ami porreszecske "generalo" programban az eredeti gridfelbontas 
			sigdtemp[i][1] = rad[i][0];					// elmenti a reszecske tavolsagat is

/*	ha a reszecske RMIN-en belul van, akkor az o "tavolsagaban" a feluletisuruseg 0		*/	
		} else {
			sigdtemp[i][0] = 0;
			sigdtemp[i][1] = rad[i][0];					// r = 0, mert ha RMIN-en belulre kerult a reszecske, akkor a program automatikusan kinullazza a reszecske tavolsagat. Itt tehat a sigdtemp[i][1] = 0 lesz!
		}

/*	a mikronos porreszecske feluletisurusege, ha 2 pop a futas --> a cm-eshez hasonlo a szamolas menete!	*/
		if(opttwopop == 1) {
			if(radmicr[i][0] >= RMIN) {
				sigdmicrtemp[i][0] = massmicrvec[i] / (2. * radmicr[i][0] * M_PI * dd);
				sigdmicrtemp[i][1] = radmicr[i][0];
			} else {
				sigdmicrtemp[i][0] = 0;
				sigdmicrtemp[i][1] = radmicr[i][0];
			}
		} else {
			sigdmicrtemp[i][0] = 0;
			sigdmicrtemp[i][1] = 0;
		}
	}

	double intsig[PARTICLE_NUMBER], intsigmicr[PARTICLE_NUMBER];

/*	a feluletisurusegek interpolalasa 2 populacio eseten	*/
	if(opttwopop == 1) {
		for(i=0; i < PARTICLE_NUMBER; i++) {
			
			double a, b;

			for(j=0; j < PARTICLE_NUMBER; j++) {
						
				double temp = 0;
				double simt = 0;
				
				if(radmicr[i][0] >= RMIN) {	
/*	Megnezi, hogy a mikronos porszemcse hol helyezkedik el a cm-eshez kepest: ha a mikoronos reszecske tavolsaga 2 cm-es kozott van: 	*/
					if(rad[i][0] <= radmicr[j][0]  && rad[i+1][0] > radmicr[j][0]) {
						a = (sigdtemp[i+1][0] - sigdtemp[i][0])/(rad[i+1][0] - rad[i][0]);	/*	akkor a mikronos tavolsagara egyenes illesztessel interpolalja a cm-es porszemcsekbol szarmazo feluletisuruseget	*/
						b = sigdtemp[i][0] - a * rad[i][0];
						simt = a * radmicr[j][0] + b;
//						printf("ri: %lg r: %lg  ro: %lg\n", sigdtemp[i][0], simt, sigdtemp[i+1][0]);
						temp = temp + simt;
					}
				} else {
					temp = 0;
				}
		
				if(temp != 0) intsigmicr[j] = temp;	/*	ide rakja az interpolalt feluletisuruseget	*/		
			
				double temp2=0;
				double simt2 = 0;

/*	Az elozohoz hasonloan interpolalja a mikronos feluletisuruseget a cm-es porszemcsek tavolsagara		*/	
				if(rad[i][0] >= RMIN) {
					if((radmicr[i][0] <= rad[j][0]  && radmicr[i+1][0] > rad[j][0]) && radmicr[i][0] > RMIN) {
						a = (sigdmicrtemp[i+1][0] - sigdmicrtemp[i][0])/(radmicr[i+1][0] - radmicr[i][0]);
						b = sigdmicrtemp[i][0] - a * radmicr[i][0];
						simt2 = a * rad[j][0] + b;
//						printf("ri: %lg r: %lg  ro: %lg\n", sigdtemp[i][0], simt, sigdtemp[i+1][0]);
						temp2 = temp2 + simt2;
					}
				} else {
					temp2 = 0;
	
				}
				if(temp2 != 0) intsig[j] = temp2;	/*	elmenti az interpolalt feluletisuruseget	*/		
				
			}

/*	itt adja ossze az interpolalt feluletisuruseget az adott meretbol szarmazo feluletisuruseggel	*/	
			sigma_d[i] = sigdtemp[i][0] + intsig[i];
			sigma_dm[i] = sigdmicrtemp[i][0] + intsigmicr[i];

		}
	} else {

/*	ha nem 2 pop a futas, akkor nincs interpolacio, szimplan a lenti tomb feltoltes	*/
		for(i=0; i < PARTICLE_NUMBER; i++) {

			sigma_d[i] = sigdtemp[i][0];
			sigma_dm[i] = 0;

		}

	}

}

